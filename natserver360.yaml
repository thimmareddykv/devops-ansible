---
# file: devops-ansible/ec2-launch-instance.yaml

# Description:
#   Attempt to launch ec2 instances 
#   This file was borrowed from wfm-api team. Thanks.

# Preconditions:
#   export AWS_ACCESS_KEY_ID=
#   export AWS_SECRET_ACCESS_KEY=
#   Require ~/.ssh/wfm-devops-root.pem
#   Top-Secret Bastion ssh config

# Examples:
#
#  TESTING
#    ansible-playbook natserver360.yaml -i hosts/natservers.ini --extra-vars "server_name=devops:development:nat-tmp vpc_subnet_id=subnet-ac7cfd87 instance_count=1" -vvvv
#
# PRODUCTION
# nat-a
#    ansible-playbook natserver360.yaml -i hosts/natservers.ini --extra-vars "counter_tag=devops-nat-a vpc_subnet_id=subnet-d47effff instance_count=1"
#
# nat-b
#    ansible-playbook natserver360.yaml -i hosts/natservers.ini --extra-vars "counter_tag=devops-nat-b vpc_subnet_id=subnet-72ee9505 instance_count=1"
#

- name: Launch/configure nat server instance {{ server_name }}
  hosts: 127.0.0.1
  connection: local
  gather_facts: false

  vars:
    ansible_distribution: CentOS
    instance_type: "t2.micro"   
    region: us-east-1
    image: ami-184dc970 # Devops testing for natserver
    
    aws_group: allow-bastion, network-nat
    #vpc_subnet_id: subnet-ced06eb9  # Testing Subnet
    #vpc_subnet_id: subnet-ac7cfd87  # VPC wfm-development vpc-587b533d bastion-b
    #vpc_subnet_id: subnet-d47effff # VPC devops-shared vpc-b37d55d6 bastion-a


  tasks:
    - name: Launch NAT Server

      local_action:
        module: ec2
        vpc_subnet_id: "{{ vpc_subnet_id }}"
        assign_public_ip: yes
        key_name: wfm-devops-root
        group: ['allow-bastion', 'network-nat']
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        region: "{{ region }}"
        wait: yes
        wait_timeout: 500
        exact_count: "{{ instance_count | default(1) }}"
        count_tag:
          Name: "{{ server_name }}"
      register: ec2_instances


    - name: Tag instances
      local_action: ec2_tag
                    resource={{ item.id }}
                    region={{ region }}
                    state=present
      with_items: ec2_instances.tagged_instances
      args:
        tags:
          Name: "{{ server_name }}"
          #counter_tag: "{{ server_name }}"
          role: "nat_server"
          owner: devops
          "wfm:team": devops

    - name: wait for instances to listen on port:22
      wait_for: state=started
                host={{ item.private_dns_name }}
                port=22
      with_items: ec2_instances.tagged_instances

    - name: Report instances to user
      #debug: msg="Instance {{ item.id }} with Public IP {{ item.public_ip }}"
      debug: msg="Instance {{ item.id }} with Private IP {{ item.private_ip }}"
      with_items: ec2_instances.instances

    - name: Add all instance private IPs to host group
      add_host: hostname={{ item.private_dns_name }}
                groupname=natservers
                groups=ec2hosts
                ansible_ssh_private_key_file=~/.ssh/wfm-devops-root.pem
                ansible_ssh_user=ec2-user
                ansible_ssh_args= -o ControlPersist=15m -F includes/ssh.config
      with_items: ec2_instances.tagged_instances

- hosts: ec2hosts
  name: configuration play
  user: ec2-user
  gather_facts: true
  tasks:

  roles:
    - { role: auto-upgrades, tags: "auto-upgrades", sudo: yes }
#  vars:
    #ansible_distribution: CentOS
    #ssh_args: -o ControlPersist=15m -F includes/ssh.config
    #scp_if_ssh: True
    #control_path: ~/.ssh/mux-%%r@%%h:%%p
